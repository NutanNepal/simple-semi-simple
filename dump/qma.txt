from sage.combinat.posets.moebius_algebra import *

class ZetaBasis(BasisAbstract):
    """
    The zeta basis for the Quantum Möbius Algebra.
    """
    def __init__(self, M, prefix='Z') -> None:
        self._basis_name = "zeta"
        CombinatorialFreeModule.__init__(self, M.base_ring(),
                                        tuple(M._lattice),
                                        prefix=prefix,
                                        category=MoebiusAlgebraBases(M))

        # Change of basis:
        E = M.E()
        phi = self.module_morphism(self._to_natural_basis,
                                codomain=E, category=self.category(),
                                triangular='upper', unitriangular=True,
                                key=M._lattice._element_to_vertex)

        phi.register_as_coercion()
        (~phi).register_as_coercion()

    def _to_natural_basis(self, x):
        M = self.realization_of()
        L = M._lattice
        E = M.E()
        q = M._q
        rank = L.rank_function()
        return E.sum_of_terms((y, q**(rank(x) - rank(y)) *
                            L.kazhdan_lusztig_polynomial(y, x)(q=q**-2))
                            for y in L.order_ideal([x]))

class DeformedMoebiusAlgebra(QuantumMoebiusAlgebra):
    """
    A class representing the Deformed Möbius Algebra with the Zeta basis.
    """
    def __init__(self, L):
        """
        Initialize the Deformed Möbius Algebra.
        """
        self._R = LaurentPolynomialRing(ZZ, 'x')
        x = self._R.gen()
        super().__init__(L, x)
        self._zeta_basis = ZetaBasis(self)

    def zeta(self):
        """
        Return the zeta basis for this algebra.
        """
        return self._zeta_basis

def is_in_Hp(alpha, M, L, E, t):
    rank_func = lambda x : M.rank(x)

    alpha_dict = E(alpha).monomial_coefficients()

    for F in alpha_dict.keys():
        for G in L.order_filter([F]):
            if G in alpha_dict and not isinstance(alpha_dict[G], type(t^0)):
                try:
                    alpha_dict[G].subs({t: 0})
                except (TypeError, ValueError):
                    print(f"Coefficient for G={G} is not a polynomial: {alpha_dict[G]}")
                    return False

        sum_S_F = 0
        rank_F = rank_func(F)

        for G in L.order_filter([F]):
            coeff_G = alpha_dict.get(G, 0) # Get coefficient alpha_G, default to 0
            if coeff_G != 0:
                rank_G = rank_func(G)
                term = (t**(rank_F - rank_G)) * coeff_G
                sum_S_F += term
        try:
            if sum_S_F != sum_S_F.subs({t: 1/t}):
                print(f"Palindromic check failed for F={F}")
                print(f"Sum = {sum_S_F}")
                print(f"Sum(1/t) = {sum_S_F.subs({t: 1/t})}")
                return False
        except Exception as e:
            print(f"Error during palindromic check for F={F}: {e}")
            return False

    return True

P = LaurentPolynomialRing(ZZ, 'x')
x = P.gen() 
k, n = 4, 6
M = matroids.CompleteGraphic(n)
r = M.rank()

e = next(x for x in M.groundset() if x  not in M.coloops())

print(M.groundset())
print("deleting ", e)
mdele = M.delete(e)
L = M.lattice_of_flats()
Ldel_e = mdele.lattice_of_flats()
Eq_M = DeformedMoebiusAlgebra(L)
Eq_mdele = DeformedMoebiusAlgebra(Ldel_e)
unit = Eq_M.one()

E = Eq_M.natural()
E_basis = E.basis()

E_mdele = Eq_mdele.natural()
E_mdele_basis = E_mdele.basis()

zeta = Eq_M.zeta()
zeta_basis = zeta.basis()

zeta_mdele = Eq_mdele.zeta()
zeta_mdele_basis = zeta_mdele.basis()

is_in_Hp(zeta[E_basis.keys()[-1]], M, L, E, x)

def delta_flat(F):
    F_del_e = frozenset(set(F) - {e})
    assert F_del_e in Ldel_e
    return Eq_mdele(x^( - M.rank(F) + mdele.rank(F_del_e)) * E_mdele_basis[F_del_e])
    
def delta(elem):
    rep = E(elem)
    rev = {value: key for key, value in E_basis.items()}
    decom = {monomial: coeff for monomial, coeff in zip(rep.monomials(), rep.coefficients())}
    return Eq_mdele(sum(decom[F] * delta_flat(rev[F]) for F in decom))

def sum_coeffs(elem):
    return sum(elem.coefficients())

dict = {F : zeta_mdele(delta(zeta[F])) for F in E_basis.keys()}

from IPython.display import HTML, display

data = []
basis_list_mdele = list(Ldel_e)

for F in dict:
    elem = dict[F]
    coeff_empty = elem.monomial_coefficients().get(frozenset(), 0)
    
    # Format delta(zeta(F)) with x_i notation
    terms = []
    for S, coeff in elem.monomial_coefficients().items():
        terms.append(f"({coeff})*Z[{str(set(S))}]")
    formatted_expr = " + ".join(terms) if terms else "0"
    if 1:
        data.append({
            'F': str(F),
            'in kl': E(zeta[F]).monomial_coefficients(),
            'delta(zeta(F))': formatted_expr,
            'coeff of empty': coeff_empty,
            'in natural basis': E_mdele(elem).monomial_coefficients()
        })

is_in_Hp(delta(zeta[E_basis.keys()[-1]]), mdele, Ldel_e, Eq_mdele, x)
import pandas as pd
df = pd.DataFrame(data)
display(HTML(
    f'<div style="height: 400px; overflow-y: auto;">{df.to_html(index=False)}</div>'
))
Q = P(invkl(M))
[kl(M), Q]
def change_of_basis(old, new, f):
    #outputs the change_of_basis matrix

    cob = []
    for b in old:
        k = f(b)
        coefficients_dict = {monomial: coeff for monomial, coeff in zip(k.monomials(), k.coefficients())}
        row = [coefficients_dict.get(Kb, 0) for Kb in new]
        cob.append(row)
    return cob

A = change_of_basis(E_basis, zeta_basis, zeta)       # e = A * zeta
B = change_of_basis(zeta_basis, E_basis, E)   # zeta = B * e